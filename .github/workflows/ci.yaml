name: Continuos Integration
on:
  pull_request:
    branches: [develop, master]
  # When a pull resquest is approved it will generate a pull request
  # The "feature" branch will be pushed into development hence the push event in the develop branch
  push:
    branches: [develop, master]
jobs:
  Continuos_Integration:
    runs-on: ubuntu-latest
    steps:
      #! Copy the repo into the VM
      - uses: actions/checkout@v2.4.0
      #! Cache the yarn node_modules. Github example below
      # https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: Get yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      #! Caching
      - uses: actions/cache@v2
        with:
          # path retrieve with the command in the previous step
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          # This key must be the same for the CACHE to be used. This key can be static or dinamic
          # We set the key to be dinamic by used variables and functions.
          # This key is a string composed by:
          # 1 - os name (variable runner.os) 2 - the yarn word 3 - hash value (notice the hash function) of the yarn-lock file.
          # If the operating system or the yarn-lock file changes (means our dependencies has changed),
          # then the cache will not be used and the dependencies will be resinstalled.
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          # This is used for the key to be reconstructed with the same pattern but with the new yarn-lock file hashed.
          restore-keys: |
            ${{ runner.os }}-yarn-
      #! Choosing Node Js version
      - name: Set up Node JS
        uses: actions/setup-node@v2.4.1
        with:
          node-version: "14.18"
      #! Instaling dependencies
      - name: Installing dependencies
        run: yarn preci && yarn ci
      #! PRETTIER FORMAT CHECK
      - name: Checking prettier formating
        run: yarn prettier:check
      #! TESTS WITH COVERAGE
      - name: Running tests with coverage
        run: yarn test -- --coverage
        # Set the this variables makes the tests run only once instead of hanging in watch mode
        env:
          CI: true
      #! UPLOAD ARTIFACT CODE COVERAGE
      # Find and Upload the artifact
      - name: Upload Artifact test coverage
        uses: actions/upload-artifact@v2
        with:
          # Name that will be displayed for download
          name: code-coverage
          # If our test are successfully the coverage folder will be created.
          # If we do not know where the folder is we would have to find it with linux commands before
          path: coverage
      #! BUILD THE PROJECT only if we pull request was approved and push to the branch
      - name: Build the Project
        if: ${{ github.event_name == 'push' }}
        run: yarn build
      #! UPLOAD ARTIFACT BUILD
      - name: Upload Artifact BUILD
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          # Name that will be displayed for download
          name: code-build
          # If our test are successfully the coverage folder will be created.
          # If we do not know where the folder is we would have to find it with linux commands before
          path: build
      #! Ziping the Assets/Artifacts to upload them to the github release
      - name: Zip the assets/artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      #! RELEASE Step to generate a release based on the semantic-release library
      # https://github.com/semantic-release/semantic-release
      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          # This is a default token created by Github to allow the native github action application to have access.
          # Using this token means that github actions app is making the release, and it does not trigger the github.event.release.
          # To trigger the event a token from an user must be used.
          #? GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Here I use my user token telling that my user have released the app.
          # With a github user token the github.event.release is created
          GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}
      #! DEPLOY TO STAGE SERVER WITH SURGE
      - name: Deploy to stage server using SURGE
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain dry-rake.surge.sh
        # Making login in SURGE
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
      #! DEPLOY TO PRODUCTION SERVER WITH SURGE
      - name: Deploy to production server using SURGE
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx surge --project ./build --domain production.surge.sh
        # Making login in SURGE
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
